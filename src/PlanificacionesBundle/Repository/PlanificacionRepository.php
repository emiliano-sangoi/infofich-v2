<?php

namespace PlanificacionesBundle\Repository;

use AppBundle\Entity\Rol;
use AppBundle\Entity\Usuario;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;
use PlanificacionesBundle\Entity\Asignatura;
use PlanificacionesBundle\Entity\Carrera;
use PlanificacionesBundle\Entity\Planificacion;

/**
 * PlanificacionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanificacionRepository extends EntityRepository {


    /**
     * Funcion que devuelve las planificaciones que un usuario puede ver/editar o modificar (siempre y cuando tenga permiso)
     *
     * Los usuarios que no son admin o no tienen el rol de SA solo pueden trabajar sobre un conjunto
     * de planificaciones.
     * Ese conjunto se determina en funcion de si la persona asociada al docente figura como responsable,
     * colaborador o adscripto.
     *
     *
     *
     * @param Usuario $usuario
     * @param Carrera|null $carrera
     * @param Asignatura|null $asignatura
     * @param type $anioAcad
     * @return Query|array
     */
    public function getPlanificacionesUsuario(Usuario $usuario, $carrera = null, $asignatura = null, $anioAcad = null, $estadoActual = null) {

        $em = $this->getEntityManager();

        /* @var $qb QueryBuilder */
        $qb = $em->getRepository(Planificacion::class)->createQueryBuilder('p');
        $qb->join('p.asignatura', 'a');
        $qb->join('a.carrera', 'c');

        if ($anioAcad) {
            $qb->andWhere($qb->expr()->eq('p.anioAcad', ':anioAcad'));
            $qb->setParameter(':anioAcad', $anioAcad);
        }

        if ($asignatura) {
            $qb->andWhere($qb->expr()->eq('a.id', ':asignatura_id'));
            $qb->setParameter(':asignatura_id', $asignatura->getId());
        }

        if ($carrera) {
            $qb->andWhere($qb->expr()->eq('c.id', ':carrera_id'));
            $qb->setParameter(':carrera_id', $carrera->getId());
        }

        if ($estadoActual) {
            $qb->join('p.historicosEstado', 'h');
            $qb->join('h.estado', 'e');
            $qb->andWhere($qb->expr()->eq('e.id', ':idEstadoActual'));
            $qb->andWhere($qb->expr()->isNull('h.fechaHasta'));
            $qb->setParameter(':idEstadoActual', $estadoActual);
        }

        $qb->orderBy('p.fechaCreacion', 'DESC');
        $qb->orderBy('p.ultimaModif', 'DESC');
        $ids = [];

        if (!$usuario->tieneRol(Rol::ROLE_ADMIN) && !$usuario->tieneRol(Rol::ROLE_SEC_ACADEMICA)) {
            //============================================================================
            //FILTRAR PLANIFICACIONES PROPIAS
            //si no es el admin se deben filtrar las planifificaciones a mostrar.
            //como criterio, a un usuario se les van a mostrar aquellas planif. que
            //lo tengan como owner u aquellas en las que figure como docente responsable.

            $it = $qb->getQuery()->iterate();
            foreach ($it as $row) {

                $planif = $row[0];
                if ($planif->inEquipoDocente($usuario->getPersona()) || $planif->getOwner() == $usuario) {
                    $ids[] = $planif->getId();
                }
            }

            if(!empty($ids)){
                $qb->andWhere('p.id IN (:ids)');
                $qb->setParameter(':ids', $ids);
            }

        }

       // dump($flag, $result);exit;

        return $qb->getQuery();
    }

}
